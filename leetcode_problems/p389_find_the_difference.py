# You are given two strings s and t.
# String t is generated by random shuffling string s
#  and then add one more letter at a random position.
# Return the letter that was added to t.
# -------------------
# 0 <= s.length <= 1000
# t.length == s.length + 1
# s and t consist of lowercase English letters.


def find_the_diff(s: str, t: str) -> str:
    # working_sol (60.95%, 76.19%) -> (41ms, 16.2mb)  time: O(n + k) | space: O(n)
    symbols: dict[str, int] = {}
    # Count everything.
    for sym in s:
        if sym not in symbols:
            symbols[sym] = 1
            continue
        symbols[sym] += 1
    # Check presented in 't'.
    for sym in t:
        # If not == +1 letter.
        if sym not in symbols:
            return sym
        symbols[sym] -= 1
    # If all presented, return count == 1.
    # We're guaranteed to have 't' with +1 symbol.
    for sym in symbols:
        if symbols[sym]:
            return sym


# Time complexity: O(n + k) -> traversing both input string, once => O(n + k) ->
# n - len of input string 's' ^^| -> extra dictionary with all unique symbols in 'n' => O(n).
# k - len of input string 't' ^^|
# Auxiliary space: O(n) -> dictionary with count for all unique symbols in 's' => O(n).


test_s: str = "abcd"
test_t: str = "abcde"
test_out: str = "e"
assert test_out == find_the_diff(test_s, test_t)

test_s = ""
test_t = "y"
test_out = "y"
assert test_out == find_the_diff(test_s, test_t)
